{"ast":null,"code":"import _slicedToArray from\"C:/Users/dannl/Documents/Programming/Bootcamp/homework/deploy-me-test/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from'react';import{useState,useEffect}from'react';import Container from'./Container';import Row from'./Row';import Col from'./Col';import Card from'./Card';import SearchForm from'./SearchForm';import MovieDetail from'./MovieDetail';import API from'../utils/API';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var OmdbContainer=function OmdbContainer(){// Set state for the search result and the search query\nvar _useState=useState({}),_useState2=_slicedToArray(_useState,2),result=_useState2[0],setResult=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),search=_useState4[0],setSearch=_useState4[1];// When the search form is submitted, use the API.search method to search for the movie(s)\nvar searchMovie=function searchMovie(query){return API.search(query).then(function(res){return setResult(res.data);}).catch(function(err){return console.log(err);});};// When the component loads, use the API.search method to render a default search result\n// The empty optional array [] will cause the hook to only run one time after the component loads\n// Refer to https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects\nuseEffect(function(){searchMovie('The Matrix');},[]);// Handler for input changes to the search form\nvar handleInputChange=function handleInputChange(e){return setSearch(e.target.value);};// Handler for what happens when the search form is submitted\nvar handleFormSubmit=function handleFormSubmit(e){e.preventDefault();searchMovie(search);};// Destructure the result object to make the code more readable, assign them to empty strings to start\nvar _result$Title=result.Title,Title=_result$Title===void 0?'':_result$Title,_result$Poster=result.Poster,Poster=_result$Poster===void 0?'':_result$Poster,_result$Director=result.Director,Director=_result$Director===void 0?'':_result$Director,_result$Genre=result.Genre,Genre=_result$Genre===void 0?'':_result$Genre,_result$Released=result.Released,Released=_result$Released===void 0?'':_result$Released;/* Fall back to default header if `Title` is undefined\n  Does `Title` exist? If so, render the `MovieDetail` card \n  If not, render a different header */return/*#__PURE__*/_jsx(Container,{children:/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(Col,{size:\"md-8\",children:/*#__PURE__*/_jsx(Card,{heading:Title||'Search for a Movie to Begin',children:Title?/*#__PURE__*/_jsx(MovieDetail,{title:Title,src:Poster,director:Director,genre:Genre,released:Released}):/*#__PURE__*/_jsx(\"h3\",{children:\"No Results to Display\"})})}),/*#__PURE__*/_jsx(Col,{size:\"md-4\",children:/*#__PURE__*/_jsx(Card,{heading:\"Search\",children:/*#__PURE__*/_jsx(SearchForm,{value:search,handleInputChange:handleInputChange,handleFormSubmit:handleFormSubmit})})})]})});};export default OmdbContainer;","map":{"version":3,"names":["React","useState","useEffect","Container","Row","Col","Card","SearchForm","MovieDetail","API","OmdbContainer","result","setResult","search","setSearch","searchMovie","query","then","res","data","catch","err","console","log","handleInputChange","e","target","value","handleFormSubmit","preventDefault","Title","Poster","Director","Genre","Released"],"sources":["C:/Users/dannl/Documents/Programming/Bootcamp/homework/deploy-me-test/src/components/OmdbContainer.js"],"sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport Container from './Container';\nimport Row from './Row';\nimport Col from './Col';\nimport Card from './Card';\nimport SearchForm from './SearchForm';\nimport MovieDetail from './MovieDetail';\nimport API from '../utils/API';\n\nconst OmdbContainer = () => {\n  // Set state for the search result and the search query\n  const [result, setResult] = useState({});\n  const [search, setSearch] = useState('');\n\n  // When the search form is submitted, use the API.search method to search for the movie(s)\n  const searchMovie = (query) =>\n    API.search(query)\n      .then((res) => setResult(res.data))\n      .catch((err) => console.log(err));\n\n  // When the component loads, use the API.search method to render a default search result\n  // The empty optional array [] will cause the hook to only run one time after the component loads\n  // Refer to https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects\n  useEffect(() => {\n    searchMovie('The Matrix');\n  }, []);\n\n  // Handler for input changes to the search form\n  const handleInputChange = (e) => setSearch(e.target.value);\n\n  // Handler for what happens when the search form is submitted\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    searchMovie(search);\n  };\n\n  // Destructure the result object to make the code more readable, assign them to empty strings to start\n  const {\n    Title = '',\n    Poster = '',\n    Director = '',\n    Genre = '',\n    Released = '',\n  } = result;\n\n  /* Fall back to default header if `Title` is undefined\n  Does `Title` exist? If so, render the `MovieDetail` card \n  If not, render a different header */\n\n  return (\n    <Container>\n      <Row>\n        <Col size=\"md-8\">\n          <Card heading={Title || 'Search for a Movie to Begin'}>\n            {Title ? (\n              <MovieDetail\n                title={Title}\n                src={Poster}\n                director={Director}\n                genre={Genre}\n                released={Released}\n              />\n            ) : (\n              <h3>No Results to Display</h3>\n            )}\n          </Card>\n        </Col>\n        <Col size=\"md-4\">\n          <Card heading=\"Search\">\n            <SearchForm\n              value={search}\n              handleInputChange={handleInputChange}\n              handleFormSubmit={handleFormSubmit}\n            />\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default OmdbContainer;\n"],"mappings":"2JAAA,MAAOA,MAAP,KAAkB,OAAlB,CACA,OAASC,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,MAAOC,UAAP,KAAsB,aAAtB,CACA,MAAOC,IAAP,KAAgB,OAAhB,CACA,MAAOC,IAAP,KAAgB,OAAhB,CACA,MAAOC,KAAP,KAAiB,QAAjB,CACA,MAAOC,WAAP,KAAuB,cAAvB,CACA,MAAOC,YAAP,KAAwB,eAAxB,CACA,MAAOC,IAAP,KAAgB,cAAhB,C,wFAEA,GAAMC,cAAa,CAAG,QAAhBA,cAAgB,EAAM,CAC1B;AACA,cAA4BT,QAAQ,CAAC,EAAD,CAApC,wCAAOU,MAAP,eAAeC,SAAf,eACA,eAA4BX,QAAQ,CAAC,EAAD,CAApC,yCAAOY,MAAP,eAAeC,SAAf,eAEA;AACA,GAAMC,YAAW,CAAG,QAAdA,YAAc,CAACC,KAAD,QAClBP,IAAG,CAACI,MAAJ,CAAWG,KAAX,EACGC,IADH,CACQ,SAACC,GAAD,QAASN,UAAS,CAACM,GAAG,CAACC,IAAL,CAAlB,EADR,EAEGC,KAFH,CAES,SAACC,GAAD,QAASC,QAAO,CAACC,GAAR,CAAYF,GAAZ,CAAT,EAFT,CADkB,EAApB,CAKA;AACA;AACA;AACAnB,SAAS,CAAC,UAAM,CACda,WAAW,CAAC,YAAD,CAAX,CACD,CAFQ,CAEN,EAFM,CAAT,CAIA;AACA,GAAMS,kBAAiB,CAAG,QAApBA,kBAAoB,CAACC,CAAD,QAAOX,UAAS,CAACW,CAAC,CAACC,MAAF,CAASC,KAAV,CAAhB,EAA1B,CAEA;AACA,GAAMC,iBAAgB,CAAG,QAAnBA,iBAAmB,CAACH,CAAD,CAAO,CAC9BA,CAAC,CAACI,cAAF,GACAd,WAAW,CAACF,MAAD,CAAX,CACD,CAHD,CAKA;AACA,kBAMIF,MANJ,CACEmB,KADF,CACEA,KADF,wBACU,EADV,8BAMInB,MANJ,CAEEoB,MAFF,CAEEA,MAFF,yBAEW,EAFX,iCAMIpB,MANJ,CAGEqB,QAHF,CAGEA,QAHF,2BAGa,EAHb,gCAMIrB,MANJ,CAIEsB,KAJF,CAIEA,KAJF,wBAIU,EAJV,gCAMItB,MANJ,CAKEuB,QALF,CAKEA,QALF,2BAKa,EALb,kBAQA;AACF;AACA,sCAEE,mBACE,KAAC,SAAD,wBACE,MAAC,GAAD,yBACE,KAAC,GAAD,EAAK,IAAI,CAAC,MAAV,uBACE,KAAC,IAAD,EAAM,OAAO,CAAEJ,KAAK,EAAI,6BAAxB,UACGA,KAAK,cACJ,KAAC,WAAD,EACE,KAAK,CAAEA,KADT,CAEE,GAAG,CAAEC,MAFP,CAGE,QAAQ,CAAEC,QAHZ,CAIE,KAAK,CAAEC,KAJT,CAKE,QAAQ,CAAEC,QALZ,EADI,cASJ,6CAVJ,EADF,EADF,cAgBE,KAAC,GAAD,EAAK,IAAI,CAAC,MAAV,uBACE,KAAC,IAAD,EAAM,OAAO,CAAC,QAAd,uBACE,KAAC,UAAD,EACE,KAAK,CAAErB,MADT,CAEE,iBAAiB,CAAEW,iBAFrB,CAGE,gBAAgB,CAAEI,gBAHpB,EADF,EADF,EAhBF,GADF,EADF,CA8BD,CAtED,CAwEA,cAAelB,cAAf"},"metadata":{},"sourceType":"module"}